
-> Internally LiveData mainly uses a SafeIterableMap (a custom observable map) to track observers.
-> fun ClassName?.functionName() â€” you declare the receiver as nullable with ?. This function is used to create an extension function that can be called on null objects safely.
-> Coroutines started with launch{} are cancellable by default.
-> LinkedHashMap or LinkedHashSet preserves insertion order in the list/set.
-> object declarations (singletons) or companion object functions can be called without creating an instance.

-> You have a vertical scrollable list and in each list item of this vertical scrollable list, we have a horizontal scrollable list.
-> We have to implement a logic which states that if any one row is horizontally scrolled, all the rows should scroll.
-> If we pass same instance of rememberLazyListState(), then the scrolling will not work as expected.

-> For safe type casting, we use as? operator. It tries to cast a value to the target type. If the cast succeeds, you get the value as that type. If the cast fails, you get null instead of an exception.